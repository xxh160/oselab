!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/xiayi/Mine/code/workspace/oselab/lab3/refc/chapter7/a/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	/p5.9.20210905.0/
$(ORANGESKERNEL)	Makefile	/^$(ORANGESKERNEL) : $(OBJS)$/;"	t
ARDStruct	boot/loader.asm	/^ARDStruct		equ	BaseOfLoaderPhyAddr + _ARDStruct$/;"	d
ASM	Makefile	/^ASM		      = nasm$/;"	m
ASMBFLAGS	Makefile	/^ASMBFLAGS	  = -I boot\/include\/$/;"	m
ASMKFLAGS	Makefile	/^ASMKFLAGS	  = -I include\/ -f elf32$/;"	m
AT_WINI_IRQ	include/const.h	/^#define	AT_WINI_IRQ	/;"	d
BaseOfStack	boot/boot.asm	/^BaseOfStack		equ	0100h	; 调试状态下堆栈基地址(栈底, 从这个位置向低地址生长/;"	d
BaseOfStack	boot/boot.asm	/^BaseOfStack		equ	07c00h	; Boot状态下堆栈基地址(栈底, 从这个位置向低地址生长/;"	d
BaseOfStack	boot/loader.asm	/^BaseOfStack	equ	0100h$/;"	d
Begin	boot/loader.asm	/^.Begin:$/;"	l
BootMessage	boot/boot.asm	/^BootMessage:		db	"Booting  "; 9字节, 不够则用空格补齐. 序号 0$/;"	d
CASCADE_IRQ	include/const.h	/^#define	CASCADE_IRQ	/;"	d
CC	Makefile	/^CC		      = gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS		  = -I include\/ -c -fno-builtin -m32 -fno-stack-protector$/;"	m
CLOCK_IRQ	include/const.h	/^#define	CLOCK_IRQ	/;"	d
DASM	Makefile	/^DASM	      = ndisasm$/;"	m
DASMFLAGS	Makefile	/^DASMFLAGS	  = -u -o $(ENTRYPOINT) -e $(ENTRYOFFSET)$/;"	m
DASMOUTPUT	Makefile	/^DASMOUTPUT	= kernel.bin.asm$/;"	m
DA_32	include/protect.h	/^#define	DA_32	/;"	d
DA_386CGate	include/protect.h	/^#define	DA_386CGate	/;"	d
DA_386IGate	include/protect.h	/^#define	DA_386IGate	/;"	d
DA_386TGate	include/protect.h	/^#define	DA_386TGate	/;"	d
DA_386TSS	include/protect.h	/^#define	DA_386TSS	/;"	d
DA_C	include/protect.h	/^#define	DA_C	/;"	d
DA_CCO	include/protect.h	/^#define	DA_CCO	/;"	d
DA_CCOR	include/protect.h	/^#define	DA_CCOR	/;"	d
DA_CR	include/protect.h	/^#define	DA_CR	/;"	d
DA_DPL0	include/protect.h	/^#define	DA_DPL0	/;"	d
DA_DPL1	include/protect.h	/^#define	DA_DPL1	/;"	d
DA_DPL2	include/protect.h	/^#define	DA_DPL2	/;"	d
DA_DPL3	include/protect.h	/^#define	DA_DPL3	/;"	d
DA_DR	include/protect.h	/^#define	DA_DR	/;"	d
DA_DRW	include/protect.h	/^#define	DA_DRW	/;"	d
DA_DRWA	include/protect.h	/^#define	DA_DRWA	/;"	d
DA_LDT	include/protect.h	/^#define	DA_LDT	/;"	d
DA_LIMIT_4K	include/protect.h	/^#define	DA_LIMIT_4K	/;"	d
DA_TaskGate	include/protect.h	/^#define	DA_TaskGate	/;"	d
DESCRIPTOR	include/protect.h	/^}DESCRIPTOR;$/;"	t	typeref:struct:s_descriptor
DispAL	boot/loader.asm	/^DispAL:$/;"	l
DispInt	boot/loader.asm	/^DispInt:$/;"	l
DispMemInfo	boot/loader.asm	/^DispMemInfo:$/;"	l
DispReturn	boot/loader.asm	/^DispReturn:$/;"	l
DispStr	boot/boot.asm	/^DispStr:$/;"	l
DispStr	boot/loader.asm	/^DispStr:$/;"	l
DispStrRealMode	boot/loader.asm	/^DispStrRealMode:$/;"	l
ENTRYOFFSET	Makefile	/^ENTRYOFFSET	=   0x400$/;"	m
ENTRYPOINT	Makefile	/^ENTRYPOINT	= 0x30400$/;"	m
ETHER_IRQ	include/const.h	/^#define	ETHER_IRQ	/;"	d
EXTERN	include/const.h	/^#define	EXTERN	/;"	d
EXTERN	include/global.h	/^#define	EXTERN$/;"	d
FALSE	include/const.h	/^#define	FALSE	/;"	d
FLOPPY_IRQ	include/const.h	/^#define	FLOPPY_IRQ	/;"	d
GATE	include/protect.h	/^}GATE;$/;"	t	typeref:struct:s_gate
GDT_SIZE	include/const.h	/^#define	GDT_SIZE	/;"	d
GLOBAL_VARIABLES_HERE	kernel/global.c	/^#define GLOBAL_VARIABLES_HERE$/;"	d	file:
GdtLen	boot/loader.asm	/^GdtLen		equ	$ - LABEL_GDT$/;"	d
GdtPtr	boot/loader.asm	/^GdtPtr		dw	GdtLen - 1				; 段界限$/;"	d
GetFATEntry	boot/boot.asm	/^GetFATEntry:$/;"	l
GetFATEntry	boot/loader.asm	/^GetFATEntry:$/;"	l
GoOnReading	boot/boot.asm	/^.GoOnReading:$/;"	l
GoOnReading	boot/loader.asm	/^.GoOnReading:$/;"	l
HZ	include/const.h	/^#define HZ /;"	d
IDT_SIZE	include/const.h	/^#define	IDT_SIZE	/;"	d
INDEX_DUMMY	include/protect.h	/^#define	INDEX_DUMMY	/;"	d
INDEX_FLAT_C	include/protect.h	/^#define	INDEX_FLAT_C	/;"	d
INDEX_FLAT_RW	include/protect.h	/^#define	INDEX_FLAT_RW	/;"	d
INDEX_LDT_FIRST	include/protect.h	/^#define	INDEX_LDT_FIRST	/;"	d
INDEX_TSS	include/protect.h	/^#define	INDEX_TSS	/;"	d
INDEX_VIDEO	include/protect.h	/^#define	INDEX_VIDEO	/;"	d
INT_M_CTL	include/const.h	/^#define	INT_M_CTL	/;"	d
INT_M_CTLMASK	include/const.h	/^#define	INT_M_CTLMASK	/;"	d
INT_S_CTL	include/const.h	/^#define	INT_S_CTL	/;"	d
INT_S_CTLMASK	include/const.h	/^#define	INT_S_CTLMASK	/;"	d
INT_VECTOR_BOUNDS	include/protect.h	/^#define	INT_VECTOR_BOUNDS	/;"	d
INT_VECTOR_BREAKPOINT	include/protect.h	/^#define	INT_VECTOR_BREAKPOINT	/;"	d
INT_VECTOR_COPROC_ERR	include/protect.h	/^#define	INT_VECTOR_COPROC_ERR	/;"	d
INT_VECTOR_COPROC_NOT	include/protect.h	/^#define	INT_VECTOR_COPROC_NOT	/;"	d
INT_VECTOR_COPROC_SEG	include/protect.h	/^#define	INT_VECTOR_COPROC_SEG	/;"	d
INT_VECTOR_DEBUG	include/protect.h	/^#define	INT_VECTOR_DEBUG	/;"	d
INT_VECTOR_DIVIDE	include/protect.h	/^#define	INT_VECTOR_DIVIDE	/;"	d
INT_VECTOR_DOUBLE_FAULT	include/protect.h	/^#define	INT_VECTOR_DOUBLE_FAULT	/;"	d
INT_VECTOR_INVAL_OP	include/protect.h	/^#define	INT_VECTOR_INVAL_OP	/;"	d
INT_VECTOR_INVAL_TSS	include/protect.h	/^#define	INT_VECTOR_INVAL_TSS	/;"	d
INT_VECTOR_IRQ0	include/protect.h	/^#define	INT_VECTOR_IRQ0	/;"	d
INT_VECTOR_IRQ8	include/protect.h	/^#define	INT_VECTOR_IRQ8	/;"	d
INT_VECTOR_NMI	include/protect.h	/^#define	INT_VECTOR_NMI	/;"	d
INT_VECTOR_OVERFLOW	include/protect.h	/^#define	INT_VECTOR_OVERFLOW	/;"	d
INT_VECTOR_PAGE_FAULT	include/protect.h	/^#define	INT_VECTOR_PAGE_FAULT	/;"	d
INT_VECTOR_PROTECTION	include/protect.h	/^#define	INT_VECTOR_PROTECTION	/;"	d
INT_VECTOR_SEG_NOT	include/protect.h	/^#define	INT_VECTOR_SEG_NOT	/;"	d
INT_VECTOR_STACK_FAULT	include/protect.h	/^#define	INT_VECTOR_STACK_FAULT	/;"	d
INT_VECTOR_SYS_CALL	include/protect.h	/^#define INT_VECTOR_SYS_CALL /;"	d
INT_VECTOR_SYS_CALL	kernel/syscall.asm	/^INT_VECTOR_SYS_CALL equ 0x90$/;"	d
InitKernel	boot/loader.asm	/^InitKernel:	; 遍历每一个 Program Header，根据 Program Header 中的信息来确定把什/;"	l
KEYBOARD_IRQ	include/const.h	/^#define	KEYBOARD_IRQ	/;"	d
KernelFileName	boot/loader.asm	/^KernelFileName		db	"KERNEL  BIN", 0	; KERNEL.BIN 之文件名$/;"	d
KillMotor	boot/loader.asm	/^KillMotor:$/;"	l
LABEL_CMP_FILENAME	boot/boot.asm	/^LABEL_CMP_FILENAME:$/;"	l
LABEL_CMP_FILENAME	boot/loader.asm	/^LABEL_CMP_FILENAME:$/;"	l
LABEL_DATA	boot/loader.asm	/^LABEL_DATA:$/;"	l
LABEL_DESC_FLAT_C	boot/loader.asm	/^LABEL_DESC_FLAT_C:		Descriptor             0,              0fffffh, DA_CR  | DA_32 | DA_LIMIT_4K/;"	l
LABEL_DESC_FLAT_RW	boot/loader.asm	/^LABEL_DESC_FLAT_RW:		Descriptor             0,              0fffffh, DA_DRW | DA_32 | DA_LIMIT_4/;"	l
LABEL_DESC_VIDEO	boot/loader.asm	/^LABEL_DESC_VIDEO:		Descriptor	 0B8000h,               0ffffh, DA_DRW                         | D/;"	l
LABEL_DIFFERENT	boot/boot.asm	/^LABEL_DIFFERENT:$/;"	l
LABEL_DIFFERENT	boot/loader.asm	/^LABEL_DIFFERENT:$/;"	l
LABEL_EVEN_2	boot/boot.asm	/^LABEL_EVEN_2:$/;"	l
LABEL_EVEN_2	boot/loader.asm	/^LABEL_EVEN_2:$/;"	l
LABEL_FILENAME_FOUND	boot/boot.asm	/^LABEL_FILENAME_FOUND:			; 找到 LOADER.BIN 后便来到这里继续$/;"	l
LABEL_FILENAME_FOUND	boot/loader.asm	/^LABEL_FILENAME_FOUND:			; 找到 KERNEL.BIN 后便来到这里继续$/;"	l
LABEL_FILE_LOADED	boot/boot.asm	/^LABEL_FILE_LOADED:$/;"	l
LABEL_FILE_LOADED	boot/loader.asm	/^LABEL_FILE_LOADED:$/;"	l
LABEL_GDT	boot/loader.asm	/^LABEL_GDT:			Descriptor             0,                    0, 0						; 空描述符$/;"	l
LABEL_GET_FAT_ENRY_OK	boot/boot.asm	/^LABEL_GET_FAT_ENRY_OK:$/;"	l
LABEL_GET_FAT_ENRY_OK	boot/loader.asm	/^LABEL_GET_FAT_ENRY_OK:$/;"	l
LABEL_GOON_LOADING_FILE	boot/boot.asm	/^LABEL_GOON_LOADING_FILE:$/;"	l
LABEL_GOON_LOADING_FILE	boot/loader.asm	/^LABEL_GOON_LOADING_FILE:$/;"	l
LABEL_GOTO_NEXT_SECTOR_IN_ROOT_DIR	boot/boot.asm	/^LABEL_GOTO_NEXT_SECTOR_IN_ROOT_DIR:$/;"	l
LABEL_GOTO_NEXT_SECTOR_IN_ROOT_DIR	boot/loader.asm	/^LABEL_GOTO_NEXT_SECTOR_IN_ROOT_DIR:$/;"	l
LABEL_GO_ON	boot/boot.asm	/^LABEL_GO_ON:$/;"	l
LABEL_GO_ON	boot/loader.asm	/^LABEL_GO_ON:$/;"	l
LABEL_NO_KERNELBIN	boot/loader.asm	/^LABEL_NO_KERNELBIN:$/;"	l
LABEL_NO_LOADERBIN	boot/boot.asm	/^LABEL_NO_LOADERBIN:$/;"	l
LABEL_PM_START	boot/loader.asm	/^LABEL_PM_START:$/;"	l
LABEL_SEARCH_FOR_KERNELBIN	boot/loader.asm	/^LABEL_SEARCH_FOR_KERNELBIN:$/;"	l
LABEL_SEARCH_FOR_LOADERBIN	boot/boot.asm	/^LABEL_SEARCH_FOR_LOADERBIN:$/;"	l
LABEL_SEARCH_IN_ROOT_DIR_BEGIN	boot/boot.asm	/^LABEL_SEARCH_IN_ROOT_DIR_BEGIN:$/;"	l
LABEL_SEARCH_IN_ROOT_DIR_BEGIN	boot/loader.asm	/^LABEL_SEARCH_IN_ROOT_DIR_BEGIN:$/;"	l
LABEL_START	boot/boot.asm	/^LABEL_START:	$/;"	l
LABEL_START	boot/loader.asm	/^LABEL_START:			; <--- 从这里开始 *************$/;"	l
LD	Makefile	/^LD		      = ld$/;"	m
LDFLAGS	Makefile	/^LDFLAGS		  = -s -Ttext $(ENTRYPOINT) -m elf_i386$/;"	m
LDT_SIZE	include/protect.h	/^#define LDT_SIZE	/;"	d
LoadMessage	boot/loader.asm	/^LoadMessage:		db	"Loading  "$/;"	d
LoaderFileName	boot/boot.asm	/^LoaderFileName		db	"LOADER  BIN", 0	; LOADER.BIN 之文件名$/;"	d
MOUNT_DIR	Makefile	/^MOUNT_DIR     = .\/floppy$/;"	m
MemChkBuf	boot/loader.asm	/^MemChkBuf		equ	BaseOfLoaderPhyAddr + _MemChkBuf$/;"	d
MemChkFail	boot/loader.asm	/^.MemChkFail:$/;"	l
MemChkLoop	boot/loader.asm	/^.MemChkLoop:$/;"	l
MemChkOK	boot/loader.asm	/^.MemChkOK:$/;"	l
MemCpy	boot/loader.asm	/^MemCpy:$/;"	l
Message1	boot/boot.asm	/^Message1		db	"Ready.   "; 9字节, 不够则用空格补齐. 序号 1$/;"	d
Message1	boot/loader.asm	/^Message1		db	"Ready.   "$/;"	d
Message2	boot/boot.asm	/^Message2		db	"No LOADER"; 9字节, 不够则用空格补齐. 序号 2$/;"	d
Message2	boot/loader.asm	/^Message2		db	"No KERNEL"$/;"	d
MessageLength	boot/boot.asm	/^MessageLength		equ	9$/;"	d
MessageLength	boot/loader.asm	/^MessageLength		equ	9$/;"	d
NR_IRQ	include/const.h	/^#define	NR_IRQ	/;"	d
NR_SYS_CALL	include/const.h	/^#define NR_SYS_CALL /;"	d
NR_TASKS	include/proc.h	/^#define NR_TASKS	/;"	d
NoAction	boot/loader.asm	/^.NoAction:$/;"	l
OBJS	Makefile	/^OBJS		= kernel\/kernel.o kernel\/syscall.o kernel\/start.o kernel\/main.o\\$/;"	m
ORANGESBOOT	Makefile	/^ORANGESBOOT	= boot\/boot.bin boot\/loader.bin$/;"	m
ORANGESKERNEL	Makefile	/^ORANGESKERNEL	= kernel.bin$/;"	m
PRINTER_IRQ	include/const.h	/^#define	PRINTER_IRQ	/;"	d
PRIVATE	include/const.h	/^#define	PRIVATE	/;"	d
PRIVILEGE_KRNL	include/const.h	/^#define	PRIVILEGE_KRNL	/;"	d
PRIVILEGE_TASK	include/const.h	/^#define	PRIVILEGE_TASK	/;"	d
PRIVILEGE_USER	include/const.h	/^#define	PRIVILEGE_USER	/;"	d
PROCESS	include/proc.h	/^}PROCESS;$/;"	t	typeref:struct:s_proc
PUBLIC	include/const.h	/^#define	PUBLIC	/;"	d
RATE_GENERATOR	include/const.h	/^#define RATE_GENERATOR /;"	d
RPL_KRNL	include/const.h	/^#define	RPL_KRNL	/;"	d
RPL_TASK	include/const.h	/^#define	RPL_TASK	/;"	d
RPL_USER	include/const.h	/^#define	RPL_USER	/;"	d
RS232_IRQ	include/const.h	/^#define	RS232_IRQ	/;"	d
ReadSector	boot/boot.asm	/^ReadSector:$/;"	l
ReadSector	boot/loader.asm	/^ReadSector:$/;"	l
SA_RPL0	include/protect.h	/^#define	SA_RPL0	/;"	d
SA_RPL1	include/protect.h	/^#define	SA_RPL1	/;"	d
SA_RPL2	include/protect.h	/^#define	SA_RPL2	/;"	d
SA_RPL3	include/protect.h	/^#define	SA_RPL3	/;"	d
SA_RPL_MASK	include/protect.h	/^#define	SA_RPL_MASK	/;"	d
SA_TIG	include/protect.h	/^#define	SA_TIG	/;"	d
SA_TIL	include/protect.h	/^#define	SA_TIL	/;"	d
SA_TI_MASK	include/protect.h	/^#define	SA_TI_MASK	/;"	d
SECONDARY_IRQ	include/const.h	/^#define	SECONDARY_IRQ	/;"	d
SELECTOR_DUMMY	include/protect.h	/^#define	SELECTOR_DUMMY	/;"	d
SELECTOR_FLAT_C	include/protect.h	/^#define	SELECTOR_FLAT_C	/;"	d
SELECTOR_FLAT_RW	include/protect.h	/^#define	SELECTOR_FLAT_RW	/;"	d
SELECTOR_KERNEL_CS	include/protect.h	/^#define	SELECTOR_KERNEL_CS	/;"	d
SELECTOR_KERNEL_DS	include/protect.h	/^#define	SELECTOR_KERNEL_DS	/;"	d
SELECTOR_KERNEL_GS	include/protect.h	/^#define	SELECTOR_KERNEL_GS	/;"	d
SELECTOR_LDT_FIRST	include/protect.h	/^#define SELECTOR_LDT_FIRST	/;"	d
SELECTOR_TSS	include/protect.h	/^#define	SELECTOR_TSS	/;"	d
SELECTOR_VIDEO	include/protect.h	/^#define	SELECTOR_VIDEO	/;"	d
STACK_FRAME	include/proc.h	/^}STACK_FRAME;$/;"	t	typeref:struct:s_stackframe
STACK_SIZE_TESTA	include/proc.h	/^#define STACK_SIZE_TESTA	/;"	d
STACK_SIZE_TESTB	include/proc.h	/^#define STACK_SIZE_TESTB	/;"	d
STACK_SIZE_TESTC	include/proc.h	/^#define STACK_SIZE_TESTC	/;"	d
STACK_SIZE_TOTAL	include/proc.h	/^#define STACK_SIZE_TOTAL	/;"	d
SelectorFlatC	boot/loader.asm	/^SelectorFlatC		equ	LABEL_DESC_FLAT_C	- LABEL_GDT$/;"	d
SelectorFlatRW	boot/loader.asm	/^SelectorFlatRW		equ	LABEL_DESC_FLAT_RW	- LABEL_GDT$/;"	d
SelectorVideo	boot/loader.asm	/^SelectorVideo		equ	LABEL_DESC_VIDEO	- LABEL_GDT + SA_RPL3$/;"	d
SetupPaging	boot/loader.asm	/^SetupPaging:$/;"	l
StackSpace	boot/loader.asm	/^StackSpace:	times	1000h	db	0$/;"	l
StackSpace	kernel/kernel.asm	/^StackSpace		resb	2 * 1024$/;"	l
StackTop	kernel/kernel.asm	/^StackTop:		; 栈顶$/;"	l
TASK	include/proc.h	/^}TASK;$/;"	t	typeref:struct:s_task
TIMER0	include/const.h	/^#define TIMER0 /;"	d
TIMER_FREQ	include/const.h	/^#define TIMER_FREQ /;"	d
TIMER_MODE	include/const.h	/^#define TIMER_MODE /;"	d
TRUE	include/const.h	/^#define	TRUE	/;"	d
TSS	include/protect.h	/^}TSS;$/;"	t	typeref:struct:s_tss
TestA	kernel/main.c	/^void TestA()$/;"	f	typeref:typename:void
TestB	kernel/main.c	/^void TestB()$/;"	f	typeref:typename:void
TestC	kernel/main.c	/^void TestC()$/;"	f	typeref:typename:void
TopOfStack	boot/loader.asm	/^TopOfStack	equ	BaseOfLoaderPhyAddr + $	; 栈顶$/;"	d
XT_WINI_IRQ	include/const.h	/^#define	XT_WINI_IRQ	/;"	d
_ARDStruct	boot/loader.asm	/^_ARDStruct:			; Address Range Descriptor Structure$/;"	l
_MemChkBuf	boot/loader.asm	/^_MemChkBuf:	times	256	db	0$/;"	l
_NR_get_ticks	kernel/syscall.asm	/^_NR_get_ticks       equ 0 ; 要跟 global.c 中 sys_call_table 的定义相对应！$/;"	d
_ORANGES_CONST_H_	include/const.h	/^#define	_ORANGES_CONST_H_$/;"	d
_ORANGES_PROTECT_H_	include/protect.h	/^#define	_ORANGES_PROTECT_H_$/;"	d
_ORANGES_TYPE_H_	include/type.h	/^#define	_ORANGES_TYPE_H_$/;"	d
_dwBaseAddrHigh	boot/loader.asm	/^	_dwBaseAddrHigh:	dd	0$/;"	d
_dwBaseAddrLow	boot/loader.asm	/^	_dwBaseAddrLow:		dd	0$/;"	d
_dwDispPos	boot/loader.asm	/^_dwDispPos:			dd	(80 * 6 + 0) * 2	; 屏幕第 6 行, 第 0 列。$/;"	d
_dwLengthHigh	boot/loader.asm	/^	_dwLengthHigh:		dd	0$/;"	d
_dwLengthLow	boot/loader.asm	/^	_dwLengthLow:		dd	0$/;"	d
_dwMCRNumber	boot/loader.asm	/^_dwMCRNumber:			dd	0	; Memory Check Result$/;"	d
_dwMemSize	boot/loader.asm	/^_dwMemSize:			dd	0$/;"	d
_dwType	boot/loader.asm	/^	_dwType:		dd	0$/;"	d
_start	kernel/kernel.asm	/^_start:$/;"	l
_szMemChkTitle	boot/loader.asm	/^_szMemChkTitle:			db	"BaseAddrL BaseAddrH LengthLow LengthHigh   Type", 0Ah, 0$/;"	d
_szRAMSize	boot/loader.asm	/^_szRAMSize:			db	"RAM size:", 0$/;"	d
_szReturn	boot/loader.asm	/^_szReturn:			db	0Ah, 0$/;"	d
add	boot/boot.asm	/^	add	di, 01Ah		; di -> 首 Sector$/;"	d
add	boot/boot.asm	/^	add	di, 20h			;      ┃$/;"	d
add	boot/loader.asm	/^	add	dh, 3			; 从第 3 行往下显示$/;"	d
add	boot/loader.asm	/^	add	di, 01Ah		; di -> 首 Sector$/;"	d
add	boot/loader.asm	/^	add	di, 20$/;"	d
add	boot/loader.asm	/^	add	di, 20h			;     ┃$/;"	d
all	Makefile	/^all : realclean everything$/;"	t
and	boot/boot.asm	/^	and	dh, 1			; dh & 1 = 磁头号$/;"	d
and	boot/boot.asm	/^	and	di, 0FFE0h		; di -> 当前条目的开始$/;"	d
and	boot/boot.asm	/^	and	di, 0FFE0h		; else ┓	di &= E0 为了让它指向本条目开头$/;"	d
and	boot/loader.asm	/^	and	dh, 1			; dh & 1 = 磁头号$/;"	d
and	boot/loader.asm	/^	and	di, 0FFE0h		; else┓	这时di的值不知道是什么, di &= e0 为了让它是 20h 的倍/;"	d
and	boot/loader.asm	/^	and	di, 0FFF0h		; di -> 当前条目的开始$/;"	d
attr	include/protect.h	/^	u8	attr;		\/* P(1) DPL(2) DT(1) TYPE(4) *\/$/;"	m	struct:s_gate	typeref:typename:u8
attr1	include/protect.h	/^	u8	attr1;			\/* P(1) DPL(2) DT(1) TYPE(4) *\/$/;"	m	struct:s_descriptor	typeref:typename:u8
bOdd	boot/boot.asm	/^bOdd			db	0		; 奇数还是偶数$/;"	d
bOdd	boot/loader.asm	/^bOdd			db	0		; 奇数还是偶数$/;"	d
backlink	include/protect.h	/^	u32	backlink;$/;"	m	struct:s_tss	typeref:typename:u32
base_high	include/protect.h	/^	u8	base_high;		\/* Base *\/$/;"	m	struct:s_descriptor	typeref:typename:u8
base_low	include/protect.h	/^	u16	base_low;		\/* Base *\/$/;"	m	struct:s_descriptor	typeref:typename:u16
base_mid	include/protect.h	/^	u8	base_mid;		\/* Base *\/$/;"	m	struct:s_descriptor	typeref:typename:u8
begin	boot/loader.asm	/^.begin:$/;"	l
bits	kernel/kernel.asm	/^bits 32$/;"	l
bits	kernel/syscall.asm	/^bits 32$/;"	l
boot/boot.bin	Makefile	/^boot\/boot.bin : boot\/boot.asm boot\/include\/load.inc boot\/include\/fat12hdr.inc$/;"	t
boot/loader.bin	Makefile	/^boot\/loader.bin : boot\/loader.asm boot\/include\/load.inc boot\/include\/fat12hdr.inc boot\/in/;"	t
bounds_check	kernel/kernel.asm	/^bounds_check:$/;"	l
breakpoint_exception	kernel/kernel.asm	/^breakpoint_exception:$/;"	l
buildimg	Makefile	/^buildimg :$/;"	t
clean	Makefile	/^clean :$/;"	t
clock_handler	kernel/clock.c	/^PUBLIC void clock_handler(int irq)$/;"	f	typeref:typename:PUBLIC void
clock_int_msg	kernel/kernel.asm	/^clock_int_msg		db	"^", 0$/;"	d
cmp	boot/boot.asm	/^	cmp	dx, 0					; ┓循环次数控制,$/;"	d
cmp	boot/boot.asm	/^	cmp	dx, 0$/;"	d
cmp	boot/loader.asm	/^	cmp	dx, 0					; ┓$/;"	d
cmp	boot/loader.asm	/^	cmp	dx, 0$/;"	d
copr_error	kernel/kernel.asm	/^copr_error:$/;"	l
copr_not_available	kernel/kernel.asm	/^copr_not_available:$/;"	l
copr_seg_overrun	kernel/kernel.asm	/^copr_seg_overrun:$/;"	l
cr3	include/protect.h	/^	u32	cr3;$/;"	m	struct:s_tss	typeref:typename:u32
cs	include/proc.h	/^	u32	cs;		\/*  ┃						│			*\/$/;"	m	struct:s_stackframe	typeref:typename:u32
cs	include/protect.h	/^	u32	cs;$/;"	m	struct:s_tss	typeref:typename:u32
csinit	kernel/kernel.asm	/^csinit:		; “这个跳转指令强制使用刚刚初始化的结构”——<<OS:D&I 2nd>> P90.$/;"	l
cstart	kernel/start.c	/^PUBLIC void cstart()$/;"	f	typeref:typename:PUBLIC void
dcount	include/protect.h	/^	u8	dcount;		\/* 该字段只在调用门描述符中有效。$/;"	m	struct:s_gate	typeref:typename:u8
dec	boot/boot.asm	/^	dec	dx					; ┛就跳到下一个 Sector$/;"	d
dec	boot/boot.asm	/^dec	cx$/;"	l
dec	boot/loader.asm	/^	dec	dx					; ┛$/;"	d
delay	lib/klib.c	/^PUBLIC void delay(int time)$/;"	f	typeref:typename:PUBLIC void
dis_already	lib/kliba.asm	/^dis_already:$/;"	l
disable_0	lib/kliba.asm	/^disable_0:$/;"	l
disable_8	lib/kliba.asm	/^disable_8:$/;"	l
disable_irq	lib/kliba.asm	/^disable_irq:$/;"	l
disasm	Makefile	/^disasm :$/;"	t
disp_color_str	lib/kliba.asm	/^disp_color_str:$/;"	l
disp_int	lib/klib.c	/^PUBLIC void disp_int(int input)$/;"	f	typeref:typename:PUBLIC void
disp_pos	include/global.h	/^EXTERN	int		disp_pos;$/;"	v	typeref:typename:EXTERN int
disp_str	lib/kliba.asm	/^disp_str:$/;"	l
divide_error	kernel/kernel.asm	/^divide_error:$/;"	l
double_fault	kernel/kernel.asm	/^double_fault:$/;"	l
ds	include/proc.h	/^	u32	ds;		\/* ┃						│			*\/$/;"	m	struct:s_stackframe	typeref:typename:u32
ds	include/protect.h	/^	u32	ds;$/;"	m	struct:s_tss	typeref:typename:u32
dw	boot/boot.asm	/^dw 	0xaa55				; 结束标志$/;"	l
dwBaseAddrHigh	boot/loader.asm	/^	dwBaseAddrHigh	equ	BaseOfLoaderPhyAddr + _dwBaseAddrHigh$/;"	d
dwBaseAddrLow	boot/loader.asm	/^	dwBaseAddrLow	equ	BaseOfLoaderPhyAddr + _dwBaseAddrLow$/;"	d
dwDispPos	boot/loader.asm	/^dwDispPos		equ	BaseOfLoaderPhyAddr + _dwDispPos$/;"	d
dwKernelSize	boot/loader.asm	/^dwKernelSize		dd	0		; KERNEL.BIN 文件大小$/;"	d
dwLengthHigh	boot/loader.asm	/^	dwLengthHigh	equ	BaseOfLoaderPhyAddr + _dwLengthHigh$/;"	d
dwLengthLow	boot/loader.asm	/^	dwLengthLow	equ	BaseOfLoaderPhyAddr + _dwLengthLow$/;"	d
dwMCRNumber	boot/loader.asm	/^dwMCRNumber		equ	BaseOfLoaderPhyAddr + _dwMCRNumber$/;"	d
dwMemSize	boot/loader.asm	/^dwMemSize		equ	BaseOfLoaderPhyAddr + _dwMemSize$/;"	d
dwType	boot/loader.asm	/^	dwType		equ	BaseOfLoaderPhyAddr + _dwType$/;"	d
eax	include/proc.h	/^	u32	eax;		\/* ┛						│			*\/$/;"	m	struct:s_stackframe	typeref:typename:u32
eax	include/protect.h	/^	u32	eax;$/;"	m	struct:s_tss	typeref:typename:u32
ebp	include/proc.h	/^	u32	ebp;		\/* ┃						│			*\/$/;"	m	struct:s_stackframe	typeref:typename:u32
ebp	include/protect.h	/^	u32	ebp;$/;"	m	struct:s_tss	typeref:typename:u32
ebx	include/proc.h	/^	u32	ebx;		\/* ┃						↑栈从高地址往低地址增长*\/		$/;"	m	struct:s_stackframe	typeref:typename:u32
ebx	include/protect.h	/^	u32	ebx;$/;"	m	struct:s_tss	typeref:typename:u32
ecx	include/proc.h	/^	u32	ecx;		\/* ┃						│			*\/$/;"	m	struct:s_stackframe	typeref:typename:u32
ecx	include/protect.h	/^	u32	ecx;$/;"	m	struct:s_tss	typeref:typename:u32
edi	include/proc.h	/^	u32	edi;		\/* ┃						│			*\/$/;"	m	struct:s_stackframe	typeref:typename:u32
edi	include/protect.h	/^	u32	edi;$/;"	m	struct:s_tss	typeref:typename:u32
edx	include/proc.h	/^	u32	edx;		\/* ┃						│			*\/$/;"	m	struct:s_stackframe	typeref:typename:u32
edx	include/protect.h	/^	u32	edx;$/;"	m	struct:s_tss	typeref:typename:u32
eflags	include/proc.h	/^	u32	eflags;		\/*  ┣ these are pushed by CPU during interrupt	│			*\/$/;"	m	struct:s_stackframe	typeref:typename:u32
eip	include/proc.h	/^	u32	eip;		\/*  ┓						│			*\/$/;"	m	struct:s_stackframe	typeref:typename:u32
eip	include/protect.h	/^	u32	eip;$/;"	m	struct:s_tss	typeref:typename:u32
enable_0	lib/kliba.asm	/^enable_0:$/;"	l
enable_8	lib/kliba.asm	/^enable_8:$/;"	l
enable_irq	lib/kliba.asm	/^enable_irq:$/;"	l
es	include/proc.h	/^	u32	es;		\/* ┃						│			*\/$/;"	m	struct:s_stackframe	typeref:typename:u32
es	include/protect.h	/^	u32	es;$/;"	m	struct:s_tss	typeref:typename:u32
esi	include/proc.h	/^	u32	esi;		\/* ┣ pushed by save()				│			*\/$/;"	m	struct:s_stackframe	typeref:typename:u32
esi	include/protect.h	/^	u32	esi;$/;"	m	struct:s_tss	typeref:typename:u32
esp	include/proc.h	/^	u32	esp;		\/*  ┃						│			*\/$/;"	m	struct:s_stackframe	typeref:typename:u32
esp	include/protect.h	/^	u32	esp;$/;"	m	struct:s_tss	typeref:typename:u32
esp0	include/protect.h	/^	u32	esp0;		\/* stack pointer to use during interrupt *\/$/;"	m	struct:s_tss	typeref:typename:u32
esp1	include/protect.h	/^	u32	esp1;$/;"	m	struct:s_tss	typeref:typename:u32
esp2	include/protect.h	/^	u32	esp2;$/;"	m	struct:s_tss	typeref:typename:u32
everything	Makefile	/^everything : $(ORANGESBOOT) $(ORANGESKERNEL)$/;"	t
exception	kernel/kernel.asm	/^exception:$/;"	l
exception_handler	kernel/protect.c	/^PUBLIC void exception_handler(int vec_no, int err_code, int eip, int cs, int eflags)$/;"	f	typeref:typename:PUBLIC void
extern	kernel/kernel.asm	/^extern	clock_handler$/;"	l
extern	kernel/kernel.asm	/^extern	cstart$/;"	l
extern	kernel/kernel.asm	/^extern	delay$/;"	l
extern	kernel/kernel.asm	/^extern	disp_pos$/;"	l
extern	kernel/kernel.asm	/^extern	disp_str$/;"	l
extern	kernel/kernel.asm	/^extern	exception_handler$/;"	l
extern	kernel/kernel.asm	/^extern	gdt_ptr$/;"	l
extern	kernel/kernel.asm	/^extern	idt_ptr$/;"	l
extern	kernel/kernel.asm	/^extern	irq_table$/;"	l
extern	kernel/kernel.asm	/^extern	k_reenter$/;"	l
extern	kernel/kernel.asm	/^extern	kernel_main$/;"	l
extern	kernel/kernel.asm	/^extern	p_proc_ready$/;"	l
extern	kernel/kernel.asm	/^extern	spurious_irq$/;"	l
extern	kernel/kernel.asm	/^extern	sys_call_table$/;"	l
extern	kernel/kernel.asm	/^extern	tss$/;"	l
extern	lib/kliba.asm	/^extern	disp_pos$/;"	l
flags	include/protect.h	/^	u32	flags;$/;"	m	struct:s_tss	typeref:typename:u32
fs	include/proc.h	/^	u32	fs;		\/* ┃						│			*\/$/;"	m	struct:s_stackframe	typeref:typename:u32
fs	include/protect.h	/^	u32	fs;$/;"	m	struct:s_tss	typeref:typename:u32
gdt	include/global.h	/^EXTERN	DESCRIPTOR	gdt[GDT_SIZE];$/;"	v	typeref:typename:EXTERN DESCRIPTOR[]
gdt_ptr	include/global.h	/^EXTERN	u8		gdt_ptr[6];	\/\/ 0~15:Limit  16~47:Base$/;"	v	typeref:typename:EXTERN u8[6]
general_protection	kernel/kernel.asm	/^general_protection:$/;"	l
get_ticks	kernel/syscall.asm	/^get_ticks:$/;"	l
global	kernel/kernel.asm	/^global	bounds_check$/;"	l
global	kernel/kernel.asm	/^global	breakpoint_exception$/;"	l
global	kernel/kernel.asm	/^global	copr_error$/;"	l
global	kernel/kernel.asm	/^global	copr_not_available$/;"	l
global	kernel/kernel.asm	/^global	copr_seg_overrun$/;"	l
global	kernel/kernel.asm	/^global	divide_error$/;"	l
global	kernel/kernel.asm	/^global	double_fault$/;"	l
global	kernel/kernel.asm	/^global	general_protection$/;"	l
global	kernel/kernel.asm	/^global	hwint00$/;"	l
global	kernel/kernel.asm	/^global	hwint01$/;"	l
global	kernel/kernel.asm	/^global	hwint02$/;"	l
global	kernel/kernel.asm	/^global	hwint03$/;"	l
global	kernel/kernel.asm	/^global	hwint04$/;"	l
global	kernel/kernel.asm	/^global	hwint05$/;"	l
global	kernel/kernel.asm	/^global	hwint06$/;"	l
global	kernel/kernel.asm	/^global	hwint07$/;"	l
global	kernel/kernel.asm	/^global	hwint08$/;"	l
global	kernel/kernel.asm	/^global	hwint09$/;"	l
global	kernel/kernel.asm	/^global	hwint10$/;"	l
global	kernel/kernel.asm	/^global	hwint11$/;"	l
global	kernel/kernel.asm	/^global	hwint12$/;"	l
global	kernel/kernel.asm	/^global	hwint13$/;"	l
global	kernel/kernel.asm	/^global	hwint14$/;"	l
global	kernel/kernel.asm	/^global	hwint15$/;"	l
global	kernel/kernel.asm	/^global	inval_opcode$/;"	l
global	kernel/kernel.asm	/^global	inval_tss$/;"	l
global	kernel/kernel.asm	/^global	nmi$/;"	l
global	kernel/kernel.asm	/^global	overflow$/;"	l
global	kernel/kernel.asm	/^global	page_fault$/;"	l
global	kernel/kernel.asm	/^global	segment_not_present$/;"	l
global	kernel/kernel.asm	/^global	single_step_exception$/;"	l
global	kernel/kernel.asm	/^global	stack_exception$/;"	l
global	kernel/kernel.asm	/^global _start	; 导出 _start$/;"	l
global	kernel/kernel.asm	/^global restart$/;"	l
global	kernel/kernel.asm	/^global sys_call$/;"	l
global	kernel/syscall.asm	/^global	get_ticks$/;"	l
global	lib/kliba.asm	/^global	disp_color_str$/;"	l
global	lib/kliba.asm	/^global	disp_str$/;"	l
global	lib/kliba.asm	/^global	in_byte$/;"	l
global	lib/kliba.asm	/^global	out_byte$/;"	l
global	lib/kliba.asm	/^global  disable_irq$/;"	l
global	lib/kliba.asm	/^global  enable_irq$/;"	l
global	lib/string.asm	/^global	memcpy$/;"	l
global	lib/string.asm	/^global	memset$/;"	l
global	lib/string.asm	/^global  strcpy$/;"	l
gs	include/proc.h	/^	u32	gs;		\/* ┓						│			*\/$/;"	m	struct:s_stackframe	typeref:typename:u32
gs	include/protect.h	/^	u32	gs;$/;"	m	struct:s_tss	typeref:typename:u32
hwint00	kernel/kernel.asm	/^hwint00:		; Interrupt routine for irq 0 (the clock).$/;"	l
hwint01	kernel/kernel.asm	/^hwint01:		; Interrupt routine for irq 1 (keyboard)$/;"	l
hwint02	kernel/kernel.asm	/^hwint02:		; Interrupt routine for irq 2 (cascade!)$/;"	l
hwint03	kernel/kernel.asm	/^hwint03:		; Interrupt routine for irq 3 (second serial)$/;"	l
hwint04	kernel/kernel.asm	/^hwint04:		; Interrupt routine for irq 4 (first serial)$/;"	l
hwint05	kernel/kernel.asm	/^hwint05:		; Interrupt routine for irq 5 (XT winchester)$/;"	l
hwint06	kernel/kernel.asm	/^hwint06:		; Interrupt routine for irq 6 (floppy)$/;"	l
hwint07	kernel/kernel.asm	/^hwint07:		; Interrupt routine for irq 7 (printer)$/;"	l
hwint08	kernel/kernel.asm	/^hwint08:		; Interrupt routine for irq 8 (realtime clock).$/;"	l
hwint09	kernel/kernel.asm	/^hwint09:		; Interrupt routine for irq 9 (irq 2 redirected)$/;"	l
hwint10	kernel/kernel.asm	/^hwint10:		; Interrupt routine for irq 10$/;"	l
hwint11	kernel/kernel.asm	/^hwint11:		; Interrupt routine for irq 11$/;"	l
hwint12	kernel/kernel.asm	/^hwint12:		; Interrupt routine for irq 12$/;"	l
hwint13	kernel/kernel.asm	/^hwint13:		; Interrupt routine for irq 13 (FPU exception)$/;"	l
hwint14	kernel/kernel.asm	/^hwint14:		; Interrupt routine for irq 14 (AT winchester)$/;"	l
hwint15	kernel/kernel.asm	/^hwint15:		; Interrupt routine for irq 15$/;"	l
idt	include/global.h	/^EXTERN	GATE		idt[IDT_SIZE];$/;"	v	typeref:typename:EXTERN GATE[]
idt_ptr	include/global.h	/^EXTERN	u8		idt_ptr[6];	\/\/ 0~15:Limit  16~47:Base$/;"	v	typeref:typename:EXTERN u8[6]
image	Makefile	/^image : realclean everything clean buildimg$/;"	t
in_byte	lib/kliba.asm	/^in_byte:$/;"	l
inc	boot/boot.asm	/^	inc	di$/;"	d
inc	boot/loader.asm	/^	inc	di$/;"	d
init_8259A	kernel/i8259.c	/^PUBLIC void init_8259A()$/;"	f	typeref:typename:PUBLIC void
init_clock	kernel/clock.c	/^PUBLIC void init_clock()$/;"	f	typeref:typename:PUBLIC void
init_descriptor	kernel/protect.c	/^PRIVATE void init_descriptor(DESCRIPTOR * p_desc, u32 base, u32 limit, u16 attribute)$/;"	f	typeref:typename:PRIVATE void
init_idt_desc	kernel/protect.c	/^PUBLIC void init_idt_desc(unsigned char vector, u8 desc_type, int_handler handler, unsigned char/;"	f	typeref:typename:PUBLIC void
init_keyboard	kernel/keyboard.c	/^PUBLIC void init_keyboard()$/;"	f	typeref:typename:PUBLIC void
init_prot	kernel/protect.c	/^PUBLIC void init_prot()$/;"	f	typeref:typename:PUBLIC void
initial_eip	include/proc.h	/^	task_f	initial_eip;$/;"	m	struct:s_task	typeref:typename:task_f
int_handler	include/type.h	/^typedef	void	(*int_handler)	();$/;"	t	typeref:typename:void (*)()
inval_opcode	kernel/kernel.asm	/^inval_opcode:$/;"	l
inval_tss	kernel/kernel.asm	/^inval_tss:$/;"	l
iobase	include/protect.h	/^	u16	iobase;	\/* I\/O位图基址大于或等于TSS段界限，就表示没有I\/O许可位图 */;"	m	struct:s_tss	typeref:typename:u16
irq_handler	include/type.h	/^typedef	void	(*irq_handler)	(int irq);$/;"	t	typeref:typename:void (*)(int irq)
irq_table	kernel/global.c	/^PUBLIC	irq_handler		irq_table[NR_IRQ];$/;"	v	typeref:typename:PUBLIC irq_handler[]
itoa	lib/klib.c	/^PUBLIC char * itoa(char * str, int num)\/* 数字前面的 0 不被显示出来, 比如 0000B800/;"	f	typeref:typename:PUBLIC char *
k_reenter	include/global.h	/^EXTERN	u32		k_reenter;$/;"	v	typeref:typename:EXTERN u32
kernel/clock.o	Makefile	/^kernel\/clock.o: kernel\/clock.c$/;"	t
kernel/global.o	Makefile	/^kernel\/global.o: kernel\/global.c include\/type.h include\/const.h include\/protect.h include\//;"	t
kernel/i8259.o	Makefile	/^kernel\/i8259.o: kernel\/i8259.c include\/type.h include\/const.h include\/protect.h include\/pr/;"	t
kernel/kernel.o	Makefile	/^kernel\/kernel.o : kernel\/kernel.asm include\/sconst.inc$/;"	t
kernel/keyboard.o	Makefile	/^kernel\/keyboard.o: kernel\/keyboard.c$/;"	t
kernel/main.o	Makefile	/^kernel\/main.o: kernel\/main.c include\/type.h include\/const.h include\/protect.h include\/stri/;"	t
kernel/proc.o	Makefile	/^kernel\/proc.o: kernel\/proc.c$/;"	t
kernel/protect.o	Makefile	/^kernel\/protect.o: kernel\/protect.c include\/type.h include\/const.h include\/protect.h include/;"	t
kernel/start.o	Makefile	/^kernel\/start.o: kernel\/start.c include\/type.h include\/const.h include\/protect.h include\/st/;"	t
kernel/syscall.o	Makefile	/^kernel\/syscall.o : kernel\/syscall.asm include\/sconst.inc$/;"	t
kernel_esp	include/proc.h	/^	u32	kernel_esp;	\/* <- 'popad' will ignore it			│			*\/$/;"	m	struct:s_stackframe	typeref:typename:u32
kernel_main	kernel/main.c	/^PUBLIC int kernel_main()$/;"	f	typeref:typename:PUBLIC int
keyboard_handler	kernel/keyboard.c	/^PUBLIC void keyboard_handler(int irq)$/;"	f	typeref:typename:PUBLIC void
ldt	include/protect.h	/^	u32	ldt;$/;"	m	struct:s_tss	typeref:typename:u32
ldt_sel	include/proc.h	/^	u16 ldt_sel;               \/* gdt selector giving ldt base and limit *\/$/;"	m	struct:s_proc	typeref:typename:u16
ldts	include/proc.h	/^	DESCRIPTOR ldts[LDT_SIZE]; \/* local descriptors for code and data *\/$/;"	m	struct:s_proc	typeref:typename:DESCRIPTOR[]
lib/klib.o	Makefile	/^lib\/klib.o: lib\/klib.c include\/type.h include\/const.h include\/protect.h include\/string.h i/;"	t
lib/kliba.o	Makefile	/^lib\/kliba.o : lib\/kliba.asm$/;"	t
lib/string.o	Makefile	/^lib\/string.o : lib\/string.asm$/;"	t
limit_high_attr2	include/protect.h	/^	u8	limit_high_attr2;	\/* G(1) D(1) 0(1) AVL(1) LimitHigh(4) *\/$/;"	m	struct:s_descriptor	typeref:typename:u8
limit_low	include/protect.h	/^	u16	limit_low;		\/* Limit *\/$/;"	m	struct:s_descriptor	typeref:typename:u16
loop	boot/loader.asm	/^.loop:					;{$/;"	l
memcpy	lib/string.asm	/^memcpy:$/;"	l
memset	lib/string.asm	/^memset:$/;"	l
milli_delay	kernel/clock.c	/^PUBLIC void milli_delay(int milli_sec)$/;"	f	typeref:typename:PUBLIC void
mov	boot/boot.asm	/^	mov	dh, 0			; "Booting  "$/;"	d
mov	boot/boot.asm	/^	mov	dh, 1			; "Ready."$/;"	d
mov	boot/boot.asm	/^	mov	dh, 2			; "No LOADER."$/;"	d
mov	boot/boot.asm	/^	mov	dh, al			; dh <- y$/;"	d
mov	boot/boot.asm	/^	mov	di, OffsetOfLoader	; es:di -> BaseOfLoader:0100 = BaseOfLoader*10h+100$/;"	d
mov	boot/boot.asm	/^	mov	dl, 0$/;"	d
mov	boot/boot.asm	/^	mov	dl, [BS_DrvNum]		; 驱动器号 (0 表示 A 盘)$/;"	d
mov	boot/boot.asm	/^	mov	ds, ax$/;"	d
mov	boot/boot.asm	/^	mov	dx, 0184fh		; 右下角: (80, 50)$/;"	d
mov	boot/boot.asm	/^	mov	dx, 10h$/;"	d
mov	boot/boot.asm	/^	mov	dx, RootDirSectors$/;"	d
mov	boot/loader.asm	/^	mov	dh, 0			; "Loading  "$/;"	d
mov	boot/loader.asm	/^	mov	dh, 1			; "Ready."$/;"	d
mov	boot/loader.asm	/^	mov	dh, 2			; "No KERNEL."$/;"	d
mov	boot/loader.asm	/^	mov	dh, al			; dh <- y$/;"	d
mov	boot/loader.asm	/^	mov	di, OffsetOfKernelFile	; es:di -> BaseOfKernelFile:???? = BaseOfKernelFile*10h+????$/;"	d
mov	boot/loader.asm	/^	mov	di, _MemChkBuf		; es:di 指向一个地址范围描述符结构（Address Range Descriptor /;"	d
mov	boot/loader.asm	/^	mov	dl, 0$/;"	d
mov	boot/loader.asm	/^	mov	dl, [BS_DrvNum]		; 驱动器号 (0 表示 A 盘)$/;"	d
mov	boot/loader.asm	/^	mov	dl, al$/;"	d
mov	boot/loader.asm	/^	mov	ds, ax$/;"	d
mov	boot/loader.asm	/^	mov	dx, 03F2h$/;"	d
mov	boot/loader.asm	/^	mov	dx, 10h$/;"	d
mov	boot/loader.asm	/^	mov	dx, RootDirSectors$/;"	d
mov	kernel/kernel.asm	/^        mov     ds, dx$/;"	d
mov	kernel/kernel.asm	/^        mov     dx, ss$/;"	d
mul	boot/boot.asm	/^	mul	dh$/;"	d
mul	boot/loader.asm	/^	mul	dh$/;"	d
name	include/proc.h	/^	char	name[32];$/;"	m	struct:s_task	typeref:typename:char[32]
nmi	kernel/kernel.asm	/^nmi:$/;"	l
no_remainder	boot/loader.asm	/^.no_remainder:$/;"	l
nop	Makefile	/^nop :$/;"	t
offset_high	include/protect.h	/^	u16	offset_high;	\/* Offset High *\/$/;"	m	struct:s_gate	typeref:typename:u16
offset_low	include/protect.h	/^	u16	offset_low;	\/* Offset Low *\/$/;"	m	struct:s_gate	typeref:typename:u16
org	boot/loader.asm	/^org  0100h$/;"	l
out	boot/loader.asm	/^	out	dx, al$/;"	d
out	lib/kliba.asm	/^	out	dx, al$/;"	d
out_byte	lib/kliba.asm	/^out_byte:$/;"	l
overflow	kernel/kernel.asm	/^overflow:$/;"	l
p_name	include/proc.h	/^	char p_name[16];           \/* name of the process *\/$/;"	m	struct:s_proc	typeref:typename:char[16]
p_proc_ready	include/global.h	/^EXTERN	PROCESS*	p_proc_ready;$/;"	v	typeref:typename:EXTERN PROCESS *
page_fault	kernel/kernel.asm	/^page_fault:$/;"	l
pid	include/proc.h	/^	u32 pid;                   \/* process id passed in from MM *\/$/;"	m	struct:s_proc	typeref:typename:u32
pop	boot/boot.asm	/^	pop	dx$/;"	d
pop	boot/loader.asm	/^	pop	dx$/;"	d
pop	kernel/kernel.asm	/^	pop	ds$/;"	d
priority	include/proc.h	/^        int priority;$/;"	m	struct:s_proc	typeref:typename:int
proc_table	kernel/global.c	/^PUBLIC	PROCESS			proc_table[NR_TASKS];$/;"	v	typeref:typename:PUBLIC PROCESS[]
push	boot/boot.asm	/^	push	dx$/;"	d
push	boot/loader.asm	/^	push	dx$/;"	d
push	kernel/kernel.asm	/^        push    ds      ;  |$/;"	d
put_irq_handler	kernel/i8259.c	/^PUBLIC void put_irq_handler(int irq, irq_handler handler)$/;"	f	typeref:typename:PUBLIC void
realclean	Makefile	/^realclean :$/;"	t
regs	include/proc.h	/^	STACK_FRAME regs;          \/* process registers saved in stack frame *\/$/;"	m	struct:s_proc	typeref:typename:STACK_FRAME
restart	kernel/kernel.asm	/^restart:$/;"	l
restart_reenter	kernel/kernel.asm	/^restart_reenter:$/;"	l
retaddr	include/proc.h	/^	u32	retaddr;	\/* return address for assembly code save()	│			*\/$/;"	m	struct:s_stackframe	typeref:typename:u32
s_descriptor	include/protect.h	/^typedef struct s_descriptor		\/* 共 8 个字节 *\/$/;"	s
s_gate	include/protect.h	/^typedef struct s_gate$/;"	s
s_proc	include/proc.h	/^typedef struct s_proc {$/;"	s
s_stackframe	include/proc.h	/^typedef struct s_stackframe {	\/* proc_ptr points here				↑ Low			*\/$/;"	s
s_task	include/proc.h	/^typedef struct s_task {$/;"	s
s_tss	include/protect.h	/^typedef struct s_tss {$/;"	s
save	kernel/kernel.asm	/^save:$/;"	l
schedule	kernel/proc.c	/^PUBLIC void schedule()$/;"	f	typeref:typename:PUBLIC void
seg2phys	kernel/protect.c	/^PUBLIC u32 seg2phys(u16 seg)$/;"	f	typeref:typename:PUBLIC u32
segment_not_present	kernel/kernel.asm	/^segment_not_present:$/;"	l
selector	include/protect.h	/^	u16	selector;	\/* Selector *\/$/;"	m	struct:s_gate	typeref:typename:u16
single_step_exception	kernel/kernel.asm	/^single_step_exception:$/;"	l
spurious_irq	kernel/i8259.c	/^PUBLIC void spurious_irq(int irq)$/;"	f	typeref:typename:PUBLIC void
ss	include/proc.h	/^	u32	ss;		\/*  ┛						┷High			*\/$/;"	m	struct:s_stackframe	typeref:typename:u32
ss	include/protect.h	/^	u32	ss;$/;"	m	struct:s_tss	typeref:typename:u32
ss0	include/protect.h	/^	u32	ss0;		\/*   "   segment  "  "    "        "     *\/$/;"	m	struct:s_tss	typeref:typename:u32
ss1	include/protect.h	/^	u32	ss1;$/;"	m	struct:s_tss	typeref:typename:u32
ss2	include/protect.h	/^	u32	ss2;$/;"	m	struct:s_tss	typeref:typename:u32
stack_exception	kernel/kernel.asm	/^stack_exception:$/;"	l
stacksize	include/proc.h	/^	int	stacksize;$/;"	m	struct:s_task	typeref:typename:int
strcpy	lib/string.asm	/^strcpy:$/;"	l
sys_call	kernel/kernel.asm	/^sys_call:$/;"	l
sys_call_table	kernel/global.c	/^PUBLIC	system_call		sys_call_table[NR_SYS_CALL] = {sys_get_ticks};$/;"	v	typeref:typename:PUBLIC system_call[]
sys_get_ticks	kernel/proc.c	/^PUBLIC int sys_get_ticks()$/;"	f	typeref:typename:PUBLIC int
system_call	include/type.h	/^typedef void*	system_call;$/;"	t	typeref:typename:void *
szMemChkTitle	boot/loader.asm	/^szMemChkTitle		equ	BaseOfLoaderPhyAddr + _szMemChkTitle$/;"	d
szRAMSize	boot/loader.asm	/^szRAMSize		equ	BaseOfLoaderPhyAddr + _szRAMSize$/;"	d
szReturn	boot/loader.asm	/^szReturn		equ	BaseOfLoaderPhyAddr + _szReturn$/;"	d
task_f	include/type.h	/^typedef	void	(*task_f)	();$/;"	t	typeref:typename:void (*)()
task_stack	kernel/global.c	/^PUBLIC	char			task_stack[STACK_SIZE_TOTAL];$/;"	v	typeref:typename:PUBLIC char[]
task_table	kernel/global.c	/^PUBLIC	TASK	task_table[NR_TASKS] = {{TestA, STACK_SIZE_TESTA, "TestA"},$/;"	v	typeref:typename:PUBLIC TASK[]
ticks	include/global.h	/^EXTERN	int		ticks;$/;"	v	typeref:typename:EXTERN int
ticks	include/proc.h	/^        int ticks;                 \/* remained ticks *\/$/;"	m	struct:s_proc	typeref:typename:int
times	boot/boot.asm	/^times 	510-($-$$)	db	0	; 填充剩下的空间，使生成的二进制代码恰好为512字节$/;"	l
trap	include/protect.h	/^	u16	trap;$/;"	m	struct:s_tss	typeref:typename:u16
tss	include/global.h	/^EXTERN	TSS		tss;$/;"	v	typeref:typename:EXTERN TSS
u16	include/type.h	/^typedef	unsigned short		u16;$/;"	t	typeref:typename:unsigned short
u32	include/type.h	/^typedef	unsigned int		u32;$/;"	t	typeref:typename:unsigned int
u8	include/type.h	/^typedef	unsigned char		u8;$/;"	t	typeref:typename:unsigned char
vir2phys	include/protect.h	/^#define vir2phys(/;"	d
wRootDirSizeForLoop	boot/boot.asm	/^wRootDirSizeForLoop	dw	RootDirSectors	; Root Directory 占用的扇区数, 在循环中会递减/;"	d
wRootDirSizeForLoop	boot/loader.asm	/^wRootDirSizeForLoop	dw	RootDirSectors	; Root Directory 占用的扇区数$/;"	d
wSectorNo	boot/boot.asm	/^wSectorNo		dw	0		; 要读取的扇区号$/;"	d
wSectorNo	boot/loader.asm	/^wSectorNo		dw	0		; 要读取的扇区号$/;"	d
xor	boot/boot.asm	/^	xor	dl, dl	; ┣ 软驱复位$/;"	d
xor	boot/boot.asm	/^	xor	dx, dx			; 现在 ax 中是 FATEntry 在 FAT 中的偏移量. 下面来计算 FATEntry 在哪/;"	d
xor	boot/loader.asm	/^	xor	dl, dl	; ┣ 软驱复位$/;"	d
xor	boot/loader.asm	/^	xor	dx, dx			; 现在 ax 中是 FATEntry 在 FAT 中的偏移量. 下面来计算 FATEntry 在哪/;"	d
